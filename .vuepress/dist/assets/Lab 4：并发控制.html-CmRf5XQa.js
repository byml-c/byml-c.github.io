import{_ as n,o as s,c as a,a as e}from"./app-CqvpY_gu.js";const p={},t=e(`<h2 id="lab-4-并发控制" tabindex="-1"><a class="header-anchor" href="#lab-4-并发控制"><span>Lab 4：并发控制</span></a></h2><blockquote><p>一入并发深似海，从此算法是路人……</p></blockquote><h3 id="并发-不许" tabindex="-1"><a class="header-anchor" href="#并发-不许"><span>并发？不许！</span></a></h3><p>伴随着并发的高效而来的，是并发的不可预料。并发的引入，无法避免地将程序从“从一个状态机跳向另一个状态机~~（折射出一缕晶莹的光……）<s>”变成了“在揭开黑布前，我也不知道下一个状态机是啥</s>（薛定谔的进程调度）~~”。如何解决这种由进程调度带来的不确定性？人们给出了答案——不并发不就行了！ 显然我们并不能完全抛弃并发，而是要做到“有限度地并发”。由此，“锁”的概念应运而生。“要么不做，要么独占”，这是锁的基本思想，这能够解决共享资源的访问与修改正确性问题（即互斥）。在此基础上，我们还得解决时间上的发生先后控制问题（即同步）。于是，人们提出了“条件锁”和“信号量”两种方法。</p><h3 id="条件锁" tabindex="-1"><a class="header-anchor" href="#条件锁"><span>条件锁</span></a></h3><p>条件锁，顾名思义就是“直到条件满足才继续向下执行的锁”。设存在全局锁（🔒）和用于线程间同步的条件变量（<code>condition_var</code>），则有： 等待同步：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token function">mutex_lock</span><span class="token punctuation">(</span>🔒<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这里可以是任意函数</span></span>
<span class="line">	<span class="token function">cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>condition_var<span class="token punctuation">,</span> 🔒<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">mutex_unlock</span><span class="token punctuation">(</span>🔒<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>唤起同步：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token function">mutex_lock</span><span class="token punctuation">(</span>🔒<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">condition <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token comment">// 这里修改条件</span></span>
<span class="line"><span class="token function">cond_broadcast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>condition_var<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒所有可能继续的线程</span></span>
<span class="line"><span class="token function">mutex_unlock</span><span class="token punctuation">(</span>🔒<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，等待同步和唤起同步的过程必须在互斥锁的保护下进行，以免出现未知的问题。</p><h3 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量"><span>信号量</span></a></h3><p>如果同步问题可以建模成“对有限的资源消耗计数”，例如停车场停车、餐厅等位，我们就可以将资源建模为“信号量”，通过对信号量的请求-释放，实现并发同步。 通过条件锁来实现信号量：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Prolaag - try + decrease/down/wait/acquire</span></span>
<span class="line">	<span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sem<span class="token operator">-&gt;</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>cv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lk<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无座？排队等着先！</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	sem<span class="token operator">-&gt;</span>count<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 老板里边请……</span></span>
<span class="line">	<span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">V</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Verhoog - increase/up/post/signal/release</span></span>
<span class="line">	<span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	sem<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 欢迎下次光临……</span></span>
<span class="line">	<span class="token function">cond_broadcast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>cv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下一位！</span></span>
<span class="line">	<span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-&gt;</span>lk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统控制" tabindex="-1"><a class="header-anchor" href="#系统控制"><span>系统控制</span></a></h3><p>站在用户程序视角，并发等待就是个不断循环的过程。但操作系统可不能将宝贵的 CPU 资源浪费在程序的自旋等待上。站在操作系统层面，我们可以这么做：</p><ul><li><code>cond_wait() -&gt; blocked</code>：将程序置于阻塞状态，不去调度这个进程/线程</li><li><code>cond_broadcast() -&gt; runnable</code>：将所有有关程序重新置于可运行状态，下次调度到时检查条件</li></ul><p>这样就可以有效减小自旋带来的开销。信号量的实现也是同理。</p><h3 id="经典并发同步问题" tabindex="-1"><a class="header-anchor" href="#经典并发同步问题"><span>经典并发同步问题</span></a></h3><h4 id="哲学家就餐问题" tabindex="-1"><a class="header-anchor" href="#哲学家就餐问题"><span>哲学家就餐问题</span></a></h4><p>问题描述：有 5 个哲学家坐在一张圆桌上，桌上摆了 5 把叉子。每个哲学家有两个状态：就餐和思考。只有一个哲学家同时拿起左右手两把叉子时，他才能顺利就餐。我们的目标是让所有哲学家能够有序在就餐和思考状态下切换。 可能的问题：如果同步处理不当，会出现所有哲学家分别握着一把叉子的情况，此时既没有人能够就餐，也没有人能够思考，会僵持在中间状态。 问题解决：将每一把叉子建模为一个信号量，每个哲学家是一个线程。对于奇数编号的哲学家，先取左手叉子，再取右手叉子；偶数则反之（这一步是避免所有哲学家同时握着同侧手叉子的关键）。</p><h4 id="生产者-消费者问题" tabindex="-1"><a class="header-anchor" href="#生产者-消费者问题"><span>生产者-消费者问题</span></a></h4><p>问题描述：一个或多个生产者将生产产物放在缓冲区中，单个消费者能够从缓冲区取出数据处理。任何时刻只有一个生产者或消费者能够访问缓冲区。 可能的问题：如果同步处理不当，会出现消费者访问到空缓冲区的情况，也可能会出现生产者向满缓冲区写入的情况。 问题解决：可以使用三个信号量解决：用作互斥锁的信号量 <code>mutex</code>，空缓冲区 <code>bufferA</code>，满缓冲区 <code>bufferB</code>。初始状态可以看作有 <code>n</code> 个球在空缓冲区中，生产者的作用是每次从空缓冲区取一个球，将其搬运到满缓冲区中；而消费者的作用是每次从满缓冲区取一个球，放回空缓冲区。</p><h4 id="读者-写者问题" tabindex="-1"><a class="header-anchor" href="#读者-写者问题"><span>读者-写者问题</span></a></h4><p>问题描述：读者和写者对数据的访问遵循如下规则：</p><ul><li>允许同一时刻有多个读者同时读取数据</li><li>没有写者时才能读，没有读者时才能写</li><li>同一时刻只能有一个写者在写入数据</li></ul><p>可能的问题：丢失修改、脏读、不可重复读 问题解决：使用两个信号量和一个变量：读者写者互斥锁 <code>RWmutex</code>，读者计数修改线程互斥锁 <code>CountMutex</code>，读者计数变量 <code>Rcount</code>。对于写者进程：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token function">P</span><span class="token punctuation">(</span>RWmutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 写操作</span></span>
<span class="line"><span class="token function">V</span><span class="token punctuation">(</span>RWmutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于读者进程：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token function">P</span><span class="token punctuation">(</span>CountMutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>Rcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">P</span><span class="token punctuation">(</span>RWmutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">++</span>Rcount<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">V</span><span class="token punctuation">(</span>CountMutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 读操作</span></span>
<span class="line"><span class="token function">P</span><span class="token punctuation">(</span>CountMutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span>Rcount<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>Rcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">V</span><span class="token punctuation">(</span>RWmutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">V</span><span class="token punctuation">(</span>Countmutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),c=[t];function l(o,i){return s(),a("div",null,c)}const r=n(p,[["render",l],["__file","Lab 4：并发控制.html.vue"]]),d=JSON.parse('{"path":"/blogs/OS/Lab%204%EF%BC%9A%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6.html","title":"Lab 4：并发控制","lang":"zh-CN","frontmatter":{"date":"2025-05-06","categories":["OS"],"prev":{"text":"Lab 3：进程调度","link":"/blogs/OS/Lab%203%EF%BC%9A%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6.html"},"next":{"text":"Lab 5：文件系统","link":"/blogs/OS/Lab%205%EF%BC%9A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html"}},"headers":[{"level":2,"title":"Lab 4：并发控制","slug":"lab-4-并发控制","link":"#lab-4-并发控制","children":[{"level":3,"title":"并发？不许！","slug":"并发-不许","link":"#并发-不许","children":[]},{"level":3,"title":"条件锁","slug":"条件锁","link":"#条件锁","children":[]},{"level":3,"title":"信号量","slug":"信号量","link":"#信号量","children":[]},{"level":3,"title":"系统控制","slug":"系统控制","link":"#系统控制","children":[]},{"level":3,"title":"经典并发同步问题","slug":"经典并发同步问题","link":"#经典并发同步问题","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/OS/Lab 4：并发控制.md"}');export{r as comp,d as data};
