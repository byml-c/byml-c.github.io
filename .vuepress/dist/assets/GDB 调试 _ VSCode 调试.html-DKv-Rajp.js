import{_ as i,r as o,o as l,c,a as s,b as n,e,d as t}from"./app-cWQpaTe1.js";const p="/assets/image-10-Dg0JYvyy.png",d="/assets/image-15-TfqrhN5D.png",r="/assets/image-14-CUMB1tr1.png",u="/assets/image-11-BJems4Pu.png",g="/assets/image-13-DIJlpiKA.png",m="/assets/image-20-By02NoF4.png",v="/assets/image-17-SYWv9MVW.png",b="/assets/image-18-C4SdtIKB.png",k="/assets/image-21-C51rScfP.png",f="/assets/image-22-B-Lf9Aa_.png",h="/assets/image-1-Bb5vxOAN.png",_="/assets/image-2-Ddd6qJk1.png",q="/assets/image-3-DSe3d6f3.png",x="/assets/image-4-BKFGVC6o.png",y="/assets/image-5-C0tEPoxi.png",S="/assets/image-6-B7-jiPsR.png",B="/assets/image-8-DkFu8UD8.png",C={},D=s("h2",{id:"使用-gdb-调试",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用-gdb-调试"},[s("span",null,"使用 GDB 调试")])],-1),E={href:"https://linuxconfig.org/gdb-debugging-tutorial-for-beginners",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.sourceware.org/gdb/documentation/",target:"_blank",rel:"noopener noreferrer"},z=t('<h3 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h3><ul><li><code>target remote :1234</code>：由于我们需要使用 QEMU 模拟器，只能采用这种方式将 GDB 接入 QEMU。运行 <code>make debug</code> 后，QEMU 窗口会等待 GDB 连接，因此会有一行灰色的提示。此时接入 GDB，可以看到蓝色的当前 EIP 位置是一个初始值。</li></ul><figure><img src="'+p+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>file &lt;file_path&gt;</code>：加载符号表。GDB 需要符号表将二进制代码地址和具体的函数名对应起来。在编译时，需要添加 <code>-g</code> 命令创建符号表，否则即使加载了也会提示无符号表。</li></ul><figure><img src="'+d+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="信息查看" tabindex="-1"><a class="header-anchor" href="#信息查看"><span>信息查看</span></a></h3><ul><li><code>info registers [name]</code>：通过 <code>info registers</code> 或 <code>i r</code> 指令，可以查看 CPU 寄存器的值。当后面不带其他参数的时候，打印的是全体寄存器的值。带参数则会打印指定名字的寄存器的值。</li></ul><figure><img src="'+u+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',9),P=s("code",null,"monitor info registers",-1),w=s("code",null,"i r",-1),j=s("code",null,"GDTR",-1),M=s("code",null,"IDTR",-1),V=s("code",null,"monitor info registers",-1),F=s("strong",null,"解析过的",-1),I=s("code",null,"0018",-1),U=s("code",null,"000b8000",-1),A=s("code",null,"ffffffff",-1),L={href:"https://wiki.osdev.org/QEMU_Monitor",target:"_blank",rel:"noopener noreferrer"},N=t('<figure><img src="'+g+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>x</code>：输出指定位置的内容。语法为 <code>x/&lt;num&gt;&lt;i(asm)|x(hex)|...&gt; &lt;addr/function_name/...&gt;</code>。</li></ul><figure><img src="'+m+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行"><span>运行</span></a></h3><ul><li><code>continue</code>：继续执行，直到遇到下一次断点</li><li><code>si</code>：向下执行一行汇编代码</li><li><code>n</code>：向下执行一行代码（需要加载符号表）</li><li><code>break &lt;addr/function_name/file_name:line&gt;</code>：设置断点。可以在指定地址、指定函数、指定文件的指定代码行打断点。注意，后两者需要先加载符号表。</li></ul><figure><img src="'+v+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>info breakpoints</code>：查看当前的断点信息</li></ul><figure><img src="'+b+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>tui enable/disable</code>：开启/关闭图形界面</li></ul><figure><img src="'+k+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>layout asm/src</code>：在汇编界面和代码界面切换</li></ul><figure><img src="'+f+`" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="使用-vscode-调试" tabindex="-1"><a class="header-anchor" href="#使用-vscode-调试"><span>使用 VSCode 调试</span></a></h2><p>GDB 命令行虽然直接，但使用起来仍然存在着一些不方便，例如每次都要输入的 <code>target remote localhost:1234</code>、反复跳转的 <code>tui</code> 和 <code>layout</code>，都给我们的调试带来了一定的困难（主要是重复输入太浪费时间了 😢）。 有没有更方便快捷的方式呢？有的，兄弟，有的！那就是 VSCode 自带的调试工具！</p><h3 id="基础调试框架" tabindex="-1"><a class="header-anchor" href="#基础调试框架"><span>基础调试框架</span></a></h3><p>从实现原理角度，VSCode 和我们一样，都是开了个 gdb 进程然后输命令。因此，我们只需要将我们常用的启动命令写入 VSCode 的配置文件，封装在 VSCode 能处理的 Task 和 Launch 结构中就可以了。 工作目录文件结构：<strong>请根据自己的文件目录结构，适当调整配置文件中的路径（所有涉及 \${config:lab.id} 的）</strong></p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code><span class="line">.</span>
<span class="line">├── .vscode</span>
<span class="line">│   ├── launch.json</span>
<span class="line">│   └── settings.json</span>
<span class="line">├── Lab1</span>
<span class="line">└── Lab2</span>
<span class="line">    ├── ...</span>
<span class="line">    └── Makefile</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置步骤：</p><ol><li>在根目录下创建 <code>.vscode</code> 文件夹，进入文件夹</li><li>新建一个 <code>settings.json</code> 文件，写入以下内容：（如果原本就有内容，直接添加一项即可）</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;others(if exists)&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;lab.id&quot;</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token comment">// 以后可以根据实验号进行调整，用于指定文件夹</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>新建一个 <code>launch.json</code> 文件，写入以下内容：</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用 IntelliSense 了解相关属性。</span></span>
<span class="line">    <span class="token comment">// 悬停以查看现有属性的描述。</span></span>
<span class="line">    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>
<span class="line">    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;qemu-debug&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cppdbg&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token comment">// \${input:symbolFile} 需安装扩展 Tasks Shell Input</span></span>
<span class="line">            <span class="token comment">// 也可直接写成符号表的路径，如 kernel/kMain.elf</span></span>
<span class="line">            <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${input:symbolFile}&quot;</span><span class="token punctuation">,</span>  </span>
<span class="line">            <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}/Lab\${config:lab.id}&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 请自行调整</span></span>
<span class="line">            <span class="token property">&quot;miDebuggerPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/usr/bin/gdb&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;miDebuggerServerAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost:1234&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;stopAtConnect&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;MIMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gdb&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 不安装扩展的话不需要写下面这个</span></span>
<span class="line">    <span class="token property">&quot;inputs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;symbolFile&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;command&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shellCommand.execute&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;find . | awk &#39;/\\\\.elf/&#39;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}/Lab\${config:lab.id}&quot;</span> <span class="token comment">// 请自行调整</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h3><ol><li>配置完成后，在左侧“运行和调试”选项中，会出现 <code>qemu-debug</code> 的选项。需要调试时，请先通过 <code>make debug</code> 启动 QEMU 窗口。然后，在调试窗口中点击绿色三角开始调试。</li></ol><figure><img src="`+h+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>（如果配置了 <code>${input:symbolFile}</code> ）会出现下拉菜单。在此处选择合适的符号表。</li></ol><figure><img src="'+_+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>观察到下方栏变色，即代表调试已经正常启动了。此时，可以在文件中添加断点，并通过上方按钮执行。</li></ol><figure><img src="'+q+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>可以在左边的调试界面看到局部变量、CPU 寄存器等的值，还可以查看调用堆栈、监视指定表达式。</li></ol><figure><img src="'+x+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="5"><li>通过在“调用堆栈”的列表项上右击鼠标，可以打开反汇编视图，查看汇编代码的执行情况。</li></ol><figure><img src="'+y+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="6"><li>可以通过在断点红点处右击选择“编辑断点”，或在未打断点的行号数字上右击选择“添加条件断点”，将表达式加入断点，断点会在满足条件表达式的时候才暂停。</li></ol><figure><img src="'+S+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="7"><li>可以通过右上角按钮打开底部面板，选择“调试控制台”，在其中以 <code>-exec &lt;gdb 命令&gt;</code> 的形式，运行命令行形式的 GDB，这与直接使用 GDB 调试是完全相同的。在符号表无效的时候可以使用此方法。</li></ol><figure><img src="'+B+'" alt="" title="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="callout" data-callout="important"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-inner">无法调试 `uMain.elf`？</div></div><div class="callout-content"><p>这是由于 GDB 默认寻址从 <code>0x0</code> 开始的问题，导致符号表无法加载在正确的位置上。以下为一些个人见解：</p><ul><li>进入内核时，系统的 <code>CS.base = 0x0, SS.base = 0x0</code>，因此在内核态下所有的地址均与物理地址相同</li><li>在 <code>loadUMain</code> 执行中，内核将用户程序加载在物理地址 <code>0x200000</code> 上，并设置了 <code>CS.base = 0x200000, SS.base = 0x200000</code></li><li>执行 <code>iret</code> 后，CPU 以 <code>0x200000</code> 为 <code>CS</code> 和 <code>SS</code> 寻址的基地址，<code>EIP</code> 此时赋值为 <code>0x0</code>，代表其实际访问物理内存为 <code>0x200000 + 0x0</code>，因此加载在 <code>0x200000</code> 且以 <code>0x0</code> 为静态地址编译链接的用户程序得以正常运行（程序运行时按照 <code>EIP</code> 和 <code>ESP</code> 中的虚拟地址）</li><li>问题来了，GDB 默认 <code>PC = 0x0 + EIP</code>，这就导致了 GDB 无法正常调试用户模式的程序！</li></ul><p>解决方法：在 <code>initSeg</code> 中设置用户模式段选择子为 <code>CS.base = 0x0, SS.base = 0x0</code>，加载以 <code>0x200000</code> 为静态地址编译链接（修改 <code>app/Makefile</code>）的用户程序。这样程序就运行在物理地址 <code>0x20000</code>，GDB 也可以正常调试了。此时程序会从 <code>EIP = 0x200000</code> 开始执行。</p></div></div>',38);function T($,O){const a=o("ExternalLinkIcon");return l(),c("div",null,[D,s("p",null,[n("GDB 是一个强大的调试工具，但由于是命令行形式，有一定的上手门槛。下面结合实验程序，介绍一些常用的命令。更多命令可以参考"),s("a",E,[n("官方新手教程"),e(a)]),n("和"),s("a",G,[n("官方文档"),e(a)]),n("。")]),z,s("ul",null,[s("li",null,[P,n("：为什么 "),w,n(" 中没有找到 "),j,n("、"),M,n(" 之类的寄存器？因为这些寄存器并不是 CPU 寄存器。我们需要通过 "),V,n(" 命令，通过 QEMU monitor 获得这些寄存器的值。值得注意的是，这个命令不接受其他参数，会打印出所有系统寄存器的值；而且，这些值是"),F,n("，以 GS 为例，"),I,n(" 是其值，"),U,n(" 是其地址，"),A,n(" 是其段限，后面是权限等信息。更多含义请阅读"),s("a",L,[n("官方文档"),e(a)]),n("。")])]),N])}const J=i(C,[["render",T],["__file","GDB 调试 _ VSCode 调试.html.vue"]]),R=JSON.parse('{"path":"/blogs/OS/GDB%20%E8%B0%83%E8%AF%95%20_%20VSCode%20%E8%B0%83%E8%AF%95.html","title":"GDB 调试 & VSCode 调试","lang":"zh-CN","frontmatter":{"date":"2025-03-29","categories":["OS"],"next":{"text":"Lab 1：PC，启动","link":"/blogs/OS/Lab%201%EF%BC%9APC%EF%BC%8C%E5%90%AF%E5%8A%A8.html"}},"headers":[{"level":2,"title":"使用 GDB 调试","slug":"使用-gdb-调试","link":"#使用-gdb-调试","children":[{"level":3,"title":"连接","slug":"连接","link":"#连接","children":[]},{"level":3,"title":"信息查看","slug":"信息查看","link":"#信息查看","children":[]},{"level":3,"title":"运行","slug":"运行","link":"#运行","children":[]}]},{"level":2,"title":"使用 VSCode 调试","slug":"使用-vscode-调试","link":"#使用-vscode-调试","children":[{"level":3,"title":"基础调试框架","slug":"基础调试框架","link":"#基础调试框架","children":[]},{"level":3,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/OS/GDB 调试 & VSCode 调试.md"}');export{J as comp,R as data};
